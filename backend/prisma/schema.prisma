generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rank {
  OBSERVADOR_INICIANTE // Níveis 0-4
  EXPLORADOR_DE_LENTES // Níveis 5-9
  ARTISTA_DA_LUZ // Níveis 10-14
  NARRADOR_VISUAL // Níveis 15-19
  MESTRE_DA_COMPOSICAO // Níveis 20-24
  LENDARIO_DA_FOTOGRAFIA // Níveis 25-30
}

model User {
  id                   Int      @id @default(autoincrement())
  username             String   @unique
  email                String   @unique
  name                 String
  passwordHash         String
  xp                   Int      @default(0)
  level                Int      @default(1)
  rank                 Rank     @default(OBSERVADOR_INICIANTE)
  photographerCategory String   @default("Entusiasta")
  city                 String?
  country              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  createdTournaments Tournament[] // Torneios criados pelo usuário
  photos             Photo[] // Fotos enviadas pelo usuário
  participations     Participation[] // Participações do usuário em torneios
  votingProgress     VotingProgress[]
  photoVotes         PhotoVote[]
  posts              Post[]
  comments           Comment[]
  likes              Like[]

  @@map("users")
}

model Tournament {
  id          Int      @id @default(autoincrement())
  title       String // Título do torneio (Ex: "Arte Urbana")
  description String // Descrição do torneio
  startDate   DateTime // Data de início do torneio
  endDate     DateTime // Data de término do torneio
  bannerId    Int      @unique // Banner do torneio, cada torneio tem um único banner
  // maxPhotos       Int       // Número máximo de fotos que cada usuário pode enviar
  createdBy   Int // ID do usuário que criou o torneio (User.id)
  createdAt   DateTime @default(now()) // Data de criação do torneio
  updatedAt   DateTime @updatedAt // Data de atualização do torneio

  creator        User             @relation(fields: [createdBy], references: [id])
  participations Participation[] // Lista de participações do torneio
  banner         Photo            @relation(fields: [bannerId], references: [id])
  votingProgress VotingProgress[]
  photoVote      PhotoVote[]

  @@map("tournaments")
}

enum PhotoType {
  PROFILE_AVATAR // Foto de perfil
  COVER_PHOTO // Foto de capa do perfil
  FEED_PHOTO // Fotos no perfil do usuário (fora de torneios)
  TOURNAMENT_BANNER // Banner do Torneio
  TOURNAMENT_PARTICIPATION // Foto para participar de um torneio
  OTHER
}

model Photo {
  id        Int       @id @default(autoincrement()) // ID da foto
  userId    Int // ID do usuário que enviou a foto
  title     String?
  location  String?
  likes     Int       @default(0)
  key       String // Key do arquivo no S3 (identificador único do arquivo no bucket)
  url       String // URL da foto (armazenada no S3, por exemplo)
  type      PhotoType // Tipo da foto
  createdAt DateTime  @default(now()) // Data de criação da foto
  updatedAt DateTime  @updatedAt // Data de atualização da foto

  user User @relation(fields: [userId], references: [id])

  // Relacionamento com a participação no torneio (opcional)
  participations Participation[]

  tournament Tournament? @relation
  photoVote  PhotoVote[]

  @@map("photos")
}

model Participation {
  id           Int      @id @default(autoincrement()) // ID da participação
  userId       Int // ID do usuário
  tournamentId Int // ID do torneio
  photoId      Int // Foto enviada para o torneio
  title        String? // Título da foto (pode ser null)
  location     String? // Localização da foto (pode ser null)
  createdAt    DateTime @default(now()) // Data de criação

  user       User       @relation(fields: [userId], references: [id])
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  photo      Photo      @relation(fields: [photoId], references: [id])

  @@unique([userId, tournamentId])
  @@map("participations")
}

enum VotingMethod {
  TOP_THREE // Escolher 3 entre 10 fotos
  DUEL // Batalha entre 2 fotos
  RATING // Avaliação de 1 a 5 estrelas
  SUPER_VOTE // Escolher 1 entre 30-40 fotos
}

model VotingProgress {
  id           Int          @id @default(autoincrement())
  userId       Int
  tournamentId Int
  method       VotingMethod
  phase        Int // 1 para Fase 1, 2 para Fase 2
  completed    Boolean      @default(false) // Se terminou a votação da Fase (Votou em todos os métodos)

  user       User       @relation(fields: [userId], references: [id])
  tournament Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([userId, tournamentId, phase])
}

model PhotoVote {
  id           Int          @id @default(autoincrement())
  userId       Int
  photoId      Int
  tournamentId Int
  method       VotingMethod
  voteScore    Int // Armazena a pontuação do voto, o valor vai depender do método
  createdAt    DateTime     @default(now()) // Data do voto

  user       User       @relation(fields: [userId], references: [id])
  photo      Photo      @relation(fields: [photoId], references: [id])
  tournament Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([userId, photoId, tournamentId, method]) // Evita duplicação de votos do mesmo usuário
}

model Post {
  id        Int    @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int   @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Like {
  id        Int   @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}